# Load the Python Standard and DesignScript Libraries
import os, sys, json,clr, tempfile,shutil
from shutil import copyfile
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *

import Autodesk.Revit.DB.JoinGeometryUtils as JGU

import time
time_start = time.strftime("%y%m%d %H:%M:%S",time.localtime(time.time()))
debugger = []
#----------------------------------------------------------------#


def setupUnit(doc):	
	try:
		#Area
		unit = Units(UnitSystem.Metric)		
		fmOp = FormatOptions(DisplayUnitType.DUT_SQUARE_METERS,UnitSymbolType.UST_NONE,0.001)		
		unit.SetFormatOptions(UnitType.UT_Area,fmOp)		
		doc.SetUnits(unit)
		#Volume
		unit1 = Units(UnitSystem.Metric)	
		fmOp1 = FormatOptions(DisplayUnitType.DUT_CUBIC_METERS,UnitSymbolType.UST_NONE,0.001)		
		unit.SetFormatOptions(UnitType.UT_Volume,fmOp1)		
		doc.SetUnits(unit)
		#doc.GetUnits().SetFormatOptions(UnitType.UT_Area,fmOp)
	except Exception as ex:
		pass

def getAllElementsOfCategories(doc,cates):
	global debugger
	categories = list(doc.Settings.Categories)
	category_names = [c.Name for c in categories]
	elements = []
	for cat in cates:
		try:
			if cat in category_names:
				c = categories[int(category_names.index(cat))]				
				elements.extend( [e for e in FilteredElementCollector(doc).OfCategoryId(c.Id).WhereElementIsNotElementType().ToElements()])
		except Exception as ex:
			debugger.append(ex)
			pass
	return elements

#----------------------------------------------------------------#
doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
opt = Options()
#----------------------------------------------------------------#
TransactionManager.Instance.EnsureInTransaction(doc)
setupUnit(doc)
TransactionManager.Instance.TransactionTaskDone()
#----------------------------------------------------------------#
cates = IN[0].splitlines()
params_read = IN[1].splitlines()
params_write = IN[2].splitlines()
try:
	if len(params_read) != len(params_write):
		raise Exception("Các cặp Parameter không phù hợp")
	
	elems = getAllElementsOfCategories(doc,cates)

	for i in range(len(params_read)):
		p_read = e.LookupParameter(params_read[i])
		p_write = e.LookupParameter(params_write[i])
		if p_read.StorageType != p_write.StorageType:
			raise Exception("Các Parameter không cùng loại Storage Typpe")
		else:
			pass

	for e in elems:



	time_end= time.strftime("%y%m%d %H:%M:%S",time.localtime(time.time()))
	OUT = "Succeeded",time_start,time_end ,debugger# cates,getAllElementsOfCategories(cates, doc),debugger,

except Exception as ex:
	debugger.append(ex)
	time_end= time.strftime("%y%m%d %H:%M:%S",time.localtime(time.time()))
	OUT = "Fail",time_start,time_end, debugger


